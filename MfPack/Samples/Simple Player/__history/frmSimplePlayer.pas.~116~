

{Project searchpath:
 ..\MfPack\MediaFoundation;
 ..\MfPack\Shared;
 ..\MfPack\DirectX
}

unit frmSimplePlayer;

interface

uses
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Variants,
  System.Classes,
  System.Win.ComObj,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  Vcl.Menus,
  {MfPack}
  MfPack.MfApi,
  MfPack.MfPlay,
  MfPack.MfError,
  MfPack.ObjBase,
  MfPack.ComBaseApi,
  MfPack.MfpUtils,
  MfPack.MfpTypes,
  MediaPlayerCallbackClass;

type

  TForm1 = class(TForm)
    MainMenu1: TMainMenu;
    File1: TMenuItem;
    OpenFile1: TMenuItem;
    Exit1: TMenuItem;
    dlgOpenFile: TOpenDialog;
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure FormPaint(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure OpenFile1Click(Sender: TObject);

  private
    { Private declarations }
    AppHandle: HWND;

    function PlayMediaFile(const hApp: HWND; const sURL: LPCWSTR): HResult;
    procedure WMSize(var Msg: TWMSize); message WM_SIZE;

  public
    { Public declarations }

  end;


var
  Form1: TForm1;


implementation

{$R *.dfm}


procedure TForm1.WMSize(var Msg: TWMSize);
begin
 // Inherited;  // OnResize method will be handled first
  if (Msg.SizeType = SIZE_RESTORED) then
    if Assigned(g_pPlayer) then
      begin
        // Resize the video.
        g_pPlayer.UpdateVideo();
      end;
  Inherited;
end;


procedure TForm1.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
  CanClose := False;

  if Assigned(g_pPlayerCB) then
    begin
      SAFE_RELEASE(g_pPlayerCB);
    end;

  if Assigned(g_pPlayer) then
    begin
      g_pPlayer.Shutdown();
      SAFE_RELEASE(g_pPlayer);
    end;

  CanClose := True;
end;


procedure TForm1.FormCreate(Sender: TObject);
begin
  g_bHasVideo := False;
end;


procedure TForm1.FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
var
  hr: HResult;
  state: MFP_MEDIAPLAYER_STATE;

begin
  hr := S_OK;

  case Key of
    VK_SPACE:   // Toggle between playback and paused/stopped.
                begin
                  if Assigned(g_pPlayer) then
                    begin
                      state := MFP_MEDIAPLAYER_STATE_EMPTY;
                      hr := g_pPlayer.GetState(state);
                      if Succeeded(hr) then
                        begin
                          if (state = MFP_MEDIAPLAYER_STATE_PAUSED) or (state = MFP_MEDIAPLAYER_STATE_STOPPED) then
                            hr := g_pPlayer.Play();
                        end
                      else if (state = MFP_MEDIAPLAYER_STATE_PLAYING) then
                        begin
                          hr := g_pPlayer.Pause();
                        end;
                    end;
                end;
  end;

  if Failed(hr) then
    ShowErrorMessage(LPCWSTR('Playback Error'), hr);
end;


procedure TForm1.FormPaint(Sender: TObject);
var
  ps: PAINTSTRUCT;
  hadc: HDC;

begin
  //TODO:
  exit;

  hadc := BeginPaint(AppHandle, ps);
  if (Assigned(g_pPlayer) and g_bHasVideo) then
    begin
      // Playback has started and there is video.
      // Do not draw the window background, because the video
      // frame fills the entire client area.
      g_pPlayer.UpdateVideo();
    end
  else
    begin
      // There is no video stream, or playback has not started.
      // Paint the entire client area.
      FillRect(hadc,
               ps.rcPaint,
               HBRUSH(COLOR_WINDOW +1));
    end;

    EndPaint(hadc, ps);
end;


procedure TForm1.OpenFile1Click(Sender: TObject);
var
  hr: HResult;
  pwszFilePath: LPCWSTR;
  teststr: string;

begin
  hr := S_OK;
  AppHandle := Form1.Handle;
  if dlgOpenFile.Execute then
    begin
      teststr := dlgOpenFile.FileName;
      pwszFilePath := LPCWSTR(teststr);
      // Open the media file.
      hr := PlayMediaFile(AppHandle, pwszFilePath);
    end;

  if Failed(hr) then
    ShowErrorMessage(LPCWSTR('Could not open file.'), hr);

end;


//-------------------------------------------------------------------
// PlayMediaFile
//
// Plays a media file, using the IMFPMediaPlayer interface.
//-------------------------------------------------------------------

function TForm1.PlayMediaFile(const hApp: HWND; const sURL: LPCWSTR): HResult;
var
  hr: HResult;

label
  done;

begin
  hr := S_OK;
  // Create the MFPlayer object.
  if not Assigned(g_pPlayer) then
    begin

      g_pPlayerCB := TMediaPlayerCallback.Create();

      if not Assigned(g_pPlayerCB) then
        begin
          hr := E_OUTOFMEMORY;
          goto done;
        end;

      // Create the player
      hr := MFPCreateMediaPlayer(Nil,
                                 False,           // Start playback automatically?
                                 MFP_OPTION_NONE, // Flags
                                 g_pPlayerCB,     // Callback
                                 hApp,            // Video window
                                 g_pPlayer        // The player
                                 );

      if Failed(hr) then
        goto done;
    end;

  // Create a new media item for this URL.
  hr := g_pPlayer.CreateMediaItemFromURL(sURL,
                                         False,
                                         0,
                                         Nil);

  // The CreateMediaItemFromURL method completes asynchronously.
  // The application will receive an MFP_EVENT_TYPE_MEDIAITEM_CREATED
  // event. See MediaPlayerCallback.OnMediaPlayerEvent().

done:

  Result := hr;

end;


// initialization and finalization /////////////////////////////////////////////

initialization
begin
  // Initialize Media Foundation platform
  if Succeeded(MFStartup(MF_VERSION)) then
    if Failed(CoInitializeEx(Nil,
                   COINIT_APARTMENTTHREADED or COINIT_DISABLE_OLE1DDE)) then
      Abort();
end;


finalization
begin
  // Shutdown MF
  MFShutdown();
  CoUninitialize();
end;

end.
